// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Webapi.Models;

namespace webapi.Migrations
{
    [DbContext(typeof(OpenposeContext))]
    [Migration("20220503121743_Add_DeleteOrNo")]
    partial class Add_DeleteOrNo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Webapi.Models.Detection", b =>
                {
                    b.Property<string>("DetectionId")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("MembersId")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("end_time")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("np")
                        .HasColumnType("int");

                    b.Property<string>("np_result")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("start_time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("DetectionId");

                    b.HasIndex("MembersId");

                    b.ToTable("Detection");
                });

            modelBuilder.Entity("Webapi.Models.DetectionFeedback", b =>
                {
                    b.Property<string>("DetectionId")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("content")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("create_time")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<int>("score")
                        .HasColumnType("int");

                    b.HasKey("DetectionId");

                    b.ToTable("DetectionFeedback");
                });

            modelBuilder.Entity("Webapi.Models.ImageFile", b =>
                {
                    b.Property<string>("ImageFileId")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("image")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("ImageFileId");

                    b.ToTable("ImageFile");
                });

            modelBuilder.Entity("Webapi.Models.Members", b =>
                {
                    b.Property<string>("MembersId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("DeleteOrNo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ImageFileId")
                        .HasColumnType("varchar(16)");

                    b.Property<string>("authcode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("isadmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("varchar(10000)");

                    b.HasKey("MembersId");

                    b.HasIndex("ImageFileId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Webapi.Models.Result", b =>
                {
                    b.Property<string>("ResultId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("DetectionId")
                        .HasColumnType("varchar(16)");

                    b.Property<string>("ImageFileId")
                        .HasColumnType("varchar(16)");

                    b.Property<int>("direction")
                        .HasColumnType("int");

                    b.Property<int>("elbow")
                        .HasColumnType("int");

                    b.Property<bool>("elbow_check")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("error")
                        .HasColumnType("longtext");

                    b.Property<int>("knee")
                        .HasColumnType("int");

                    b.Property<bool>("knee_check")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("neck_check")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("result")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("waist")
                        .HasColumnType("int");

                    b.Property<bool>("waist_check")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ResultId");

                    b.HasIndex("DetectionId");

                    b.HasIndex("ImageFileId");

                    b.ToTable("Result");
                });

            modelBuilder.Entity("Webapi.Models.SystemFeedback", b =>
                {
                    b.Property<string>("MembersId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("content")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("create_time")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<string>("reply")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("reply_time")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("score")
                        .HasColumnType("int");

                    b.HasKey("MembersId");

                    b.ToTable("SystemFeedback");
                });

            modelBuilder.Entity("Webapi.Models.Detection", b =>
                {
                    b.HasOne("Webapi.Models.Members", "Members")
                        .WithMany()
                        .HasForeignKey("MembersId");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("Webapi.Models.DetectionFeedback", b =>
                {
                    b.HasOne("Webapi.Models.Detection", "Detection")
                        .WithOne("DetectionFeedback")
                        .HasForeignKey("Webapi.Models.DetectionFeedback", "DetectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detection");
                });

            modelBuilder.Entity("Webapi.Models.Members", b =>
                {
                    b.HasOne("Webapi.Models.ImageFile", "ImageFile")
                        .WithMany()
                        .HasForeignKey("ImageFileId");

                    b.Navigation("ImageFile");
                });

            modelBuilder.Entity("Webapi.Models.Result", b =>
                {
                    b.HasOne("Webapi.Models.Detection", "Detection")
                        .WithMany("Results")
                        .HasForeignKey("DetectionId");

                    b.HasOne("Webapi.Models.ImageFile", "ImageFile")
                        .WithMany()
                        .HasForeignKey("ImageFileId");

                    b.Navigation("Detection");

                    b.Navigation("ImageFile");
                });

            modelBuilder.Entity("Webapi.Models.SystemFeedback", b =>
                {
                    b.HasOne("Webapi.Models.Members", "Members")
                        .WithOne("SystemFeedback")
                        .HasForeignKey("Webapi.Models.SystemFeedback", "MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Members");
                });

            modelBuilder.Entity("Webapi.Models.Detection", b =>
                {
                    b.Navigation("DetectionFeedback");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("Webapi.Models.Members", b =>
                {
                    b.Navigation("SystemFeedback");
                });
#pragma warning restore 612, 618
        }
    }
}
